// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package main

import (
	"context"
	"os"
	"testing"

	"github.com/cucumber/godog"
	"github.com/cucumber/godog/colors"
	messages "github.com/cucumber/messages-go/v16"
	apme2e "github.com/elastic/e2e-testing/internal"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/pflag" // godog v0.12.4 (latest)
	"go.elastic.co/apm"
)

var testSuite ${CAPITAL_SUITE}TestSuite

var tx *apm.Transaction
var stepSpan *apm.Span

// ${CAPITAL_SUITE}TestSuite represents a test suite for ${CAPITAL_SUITE}
type ${CAPITAL_SUITE}TestSuite struct {
	// instrumentation
	currentContext context.Context
}

var opts = godog.Options{
	Output: colors.Colored(os.Stdout),
	Format: "progress", // can define default values
}

func init() {
	godog.BindCommandLineFlags("godog.", &opts) // godog v0.12.4 (latest)
}

func TestMain(m *testing.M) {
	pflag.Parse()
	opts.Paths = pflag.Args()

	status := godog.TestSuite{
		Name:                 "${LOWER_SUITE}",
		TestSuiteInitializer: Initialize${CAPITAL_SUITE}TestSuite,
		ScenarioInitializer:  Initialize${CAPITAL_SUITE}Scenarios,
		Options:              &opts,
	}.Run()

	// Optional: Run `testing` package's logic besides godog.
	if st := m.Run(); st > status {
		status = st
	}

	os.Exit(status)
}

func Initialize${CAPITAL_SUITE}Scenarios(ctx *godog.ScenarioContext) {
	ctx.Before(func(ctx context.Context, sc *godog.Scenario) (context.Context, error) {
		log.Tracef("Before ${CAPITAL_SUITE} scenario: %s", sc.Name)

		tx = apme2e.StartTransaction(sc.Name, "test.scenario")
		tx.Context.SetLabel("suite", "${CAPITAL_SUITE}")

		return ctx, nil
	})

	ctx.After(func(ctx context.Context, sc *godog.Scenario, err error) (context.Context, error) {
		if err != nil {
			e := apm.DefaultTracer.NewError(err)
			e.Context.SetLabel("scenario", sc.Name)
			e.Context.SetLabel("gherkin_type", "scenario")
			e.Send()
		}

		f := func() {
			tx.End()

			apm.DefaultTracer.Flush(nil)
		}
		defer f()

		log.Tracef("After ${CAPITAL_SUITE} scenario: %s", sc.Name)
		return ctx, nil
	})

	ctx.StepContext().Before(func(ctx context.Context, step *godog.Step) (context.Context, error) {
		log.Tracef("Before step: %s", step.Text)
		stepSpan = tx.StartSpan(step.GetText(), "test.scenario.step", nil)
		testSuite.currentContext = apm.ContextWithSpan(context.Background(), stepSpan)

		return ctx, nil
	})
	ctx.StepContext().After(func(ctx context.Context, step *godog.Step, status godog.StepResultStatus, err error) (context.Context, error) {
		if err != nil {
			e := apm.DefaultTracer.NewError(err)
			e.Context.SetLabel("step", st.GetText())
			e.Context.SetLabel("gherkin_type", "step")
			e.Send()
		}

		if stepSpan != nil {
			stepSpan.End()
		}

		log.Tracef("After step (%s): %s", status.String(), step.Text)
		return ctx, nil
	})
}

// Initialize${CAPITAL_SUITE}TestSuite adds steps to the Godog test suite
func Initialize${CAPITAL_SUITE}TestSuite(ctx *godog.TestSuiteContext) {
	testSuite = ${CAPITAL_SUITE}TestSuite{}

	ctx.BeforeSuite(func() {
		log.Trace("Before ${CAPITAL_SUITE} Suite...")

		var suiteTx *apm.Transaction
		var suiteParentSpan *apm.Span
		var suiteContext = context.Background()

		// instrumentation
		defer apm.DefaultTracer.Flush(nil)
		suiteTx = apme2e.StartTransaction("Initialise ${CAPITAL_SUITE}", "test.suite")
		defer suiteTx.End()
		suiteParentSpan = suiteTx.StartSpan("Before ${CAPITAL_SUITE} test suite", "test.suite.before", nil)
		suiteContext = apm.ContextWithSpan(suiteContext, suiteParentSpan)

		testSuite.currentContext = suiteContext

		defer suiteParentSpan.End()
	})

	ctx.AfterSuite(func() {
		f := func() {
			apm.DefaultTracer.Flush(nil)
		}
		defer f()

		// instrumentation
		var suiteTx *apm.Transaction
		var suiteParentSpan *apm.Span
		var suiteContext = context.Background()
		defer apm.DefaultTracer.Flush(nil)
		suiteTx = apme2e.StartTransaction("Tear Down ${CAPITAL_SUITE}", "test.suite")
		defer suiteTx.End()
		suiteParentSpan = suiteTx.StartSpan("After ${CAPITAL_SUITE} test suite", "test.suite.after", nil)
		suiteContext = apm.ContextWithSpan(suiteContext, suiteParentSpan)

		testSuite.currentContext = suiteContext

		defer suiteParentSpan.End()
	})
}
