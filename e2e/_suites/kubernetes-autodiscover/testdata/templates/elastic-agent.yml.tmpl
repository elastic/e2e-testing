apiVersion: v1
kind: ConfigMap
metadata:
  name: agent-event-writer
  labels:
    k8s-app: elastic-agent
data:
  writer.sh: |-
    #!/bin/sh
    apt-get install jq -y
    rm /var/lib/dpkg/lock
    apt-get install jq -y
    sleep 10;
    while true;
    do
{{ if option "logs generic" }}
        index=$(curl --user elastic:changeme http://elasticsearch:9200/_cat/indices/.ds-logs-generic-default*?format=json | jq .[0].'index' | tr -d '"');
        curl --user elastic:changeme \
        http://elasticsearch:9200/${index}/_search?format=json \
        | jq -r .'hits'.'hits'[].'_source' >> /tmp/beats-events
{{ end }}
{{ if option "logs generic init" }}
        index=$(curl --user elastic:changeme http://elasticsearch:9200/_cat/indices/.ds-logs-generic-default*?format=json | jq .[0].'index' | tr -d '"');
        curl --user elastic:changeme \
        http://elasticsearch:9200/${index}/_search?format=json \
        | jq -r .'hits'.'hits'[].'_source' >> /tmp/beats-events
{{ end }}
{{ if option "logs generic failing" }}
        index=$(curl --user elastic:changeme http://elasticsearch:9200/_cat/indices/.ds-logs-generic-default*?format=json | jq .[0].'index' | tr -d '"');
        curl --user elastic:changeme \
        http://elasticsearch:9200/${index}/_search?format=json \
        | jq -r .'hits'.'hits'[].'_source' >> /tmp/beats-events
{{ end }}
{{ if option "logs generic cronjob" }}
        index=$(curl --user elastic:changeme http://elasticsearch:9200/_cat/indices/.ds-logs-generic-default*?format=json | jq .[0].'index' | tr -d '"');
        curl --user elastic:changeme \
        http://elasticsearch:9200/${index}/_search?format=json \
        | jq -r .'hits'.'hits'[].'_source' >> /tmp/beats-events
{{ end }}
{{ if option "redis info" }}
        index=$(curl --user elastic:changeme http://elasticsearch:9200/_cat/indices/.ds-metrics-redis.info-default*?format=json | jq .[0].'index' | tr -d '"');
        curl --user elastic:changeme \
        http://elasticsearch:9200/${index}/_search?format=json \
        | jq -r .'hits'.'hits'[].'_source' >> /tmp/beats-events
{{ end }}
        sleep 10;
    done
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: agent-node-datastreams
  labels:
    k8s-app: elastic-agent
data:
  agent.yml: |-
    outputs:
      default:
        type: elasticsearch
        hosts:
          - >-
            ${ES_HOST}
        username: ${ES_USERNAME}
        password: ${ES_PASSWORD}
    agent:
      monitoring:
        enabled: true
        use_output: default
        logs: true
        metrics: true
    providers.kubernetes:
      node: ${NODE_NAME}
      scope: node
    inputs:
      - name: container-log
        type: logfile
        use_output: default
        meta:
          package:
            name: log
            version: 0.4.6
        data_stream:
          namespace: default
        streams:
          - data_stream:
              dataset: generic
            symlinks: true
            paths:
              - /var/log/containers/*${kubernetes.container.id}.log
{{ if option "logs generic failing" }}
            condition: ${kubernetes.pod.name} == 'a-failing-pod'
{{ end }}
{{ if option "logs generic init" }}
            condition: ${kubernetes.container.name} == 'init-container' OR ${kubernetes.container.name} == 'container-in-pod'
{{ end }}
{{ if option "logs generic cronjob" }}
            condition: ${kubernetes.container.name} == 'cronjob-container'
{{ end }}
      # Add extra input blocks here, based on conditions
      # so as to automatically identify targeted Pods and start monitoring them
      # using a predefined integration. For instance:
      - name: redis
        type: redis/metrics
        use_output: default
        meta:
          package:
            name: redis
            version: 0.3.6
        data_stream:
          namespace: default
        streams:
          - data_stream:
              dataset: redis.info
              type: metrics
            metricsets:
              - info
            hosts:
              - '${kubernetes.pod.ip}:6379'
            idle_timeout: 20s
            maxconn: 10
            network: tcp
            period: 10s
            condition: ${kubernetes.labels.app} == 'redis'
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: elastic-agent
  labels:
    k8s-app: elastic-agent
spec:
  selector:
    matchLabels:
      k8s-app: elastic-agent
  template:
    metadata:
      labels:
        k8s-app: elastic-agent
    spec:
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: elastic-agent
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: elastic-agent
          image: docker.elastic.co/{{ beats_namespace }}/elastic-agent:{{ beats_version }}
          command: ['sh', '-c', '(/etc/writer.sh &); elastic-agent container -c /etc/agent.yml -e']
          env:
            - name: ES_USERNAME
              value: "elastic"
            - name: ES_PASSWORD
              value: "changeme"
            - name: ES_HOST
              value: "http://elasticsearch:9200"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          securityContext:
            runAsUser: 0
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
            - name: event-writer
              mountPath: /etc/writer.sh
              subPath: writer.sh
            - name: datastreams
              mountPath: /etc/agent.yml
              readOnly: true
              subPath: agent.yml
            - name: proc
              mountPath: /hostfs/proc
              readOnly: true
            - name: cgroup
              mountPath: /hostfs/sys/fs/cgroup
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: varlog
              mountPath: /var/log
              readOnly: true
      volumes:
        - name: event-writer
          configMap:
            defaultMode: 0755
            name: agent-event-writer
        - name: datastreams
          configMap:
            defaultMode: 0640
            name: agent-node-datastreams
        - name: proc
          hostPath:
            path: /proc
        - name: cgroup
          hostPath:
            path: /sys/fs/cgroup
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: varlog
          hostPath:
            path: /var/log
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-agent-{{ namespace }}
  ownerReferences:
  - apiVersion: v1
    kind: Namespace
    name: {{ namespace }}
    uid: {{ namespace_uid }}
subjects:
  - kind: ServiceAccount
    name: elastic-agent
    namespace: {{ namespace }}
roleRef:
  kind: ClusterRole
  name: elastic-agent
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: elastic-agent-{{ namespace }}
subjects:
  - kind: ServiceAccount
    name: elastic-agent
    namespace: {{ namespace }}
roleRef:
  kind: Role
  name: elastic-agent
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: elastic-agent-kubeadm-config-{{ namespace }}
subjects:
  - kind: ServiceAccount
    name: elastic-agent
    namespace: {{ namespace }}
roleRef:
  kind: Role
  name: elastic-agent-kubeadm-config
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-agent
  labels:
    k8s-app: elastic-agent
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - namespaces
      - events
      - pods
      - services
      - configmaps
    verbs: ["get", "list", "watch"]
  # Enable this rule only if planing to use kubernetes_secrets provider
  #- apiGroups: [""]
  #  resources:
  #  - secrets
  #  verbs: ["get"]
  - apiGroups: ["extensions"]
    resources:
      - replicasets
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources:
      - statefulsets
      - deployments
      - replicasets
      - daemonsets
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources:
      - jobs
      - cronjobs
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - ""
    resources:
      - nodes/stats
    verbs:
      - get
  # required for apiserver
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: elastic-agent
  # should be the namespace where elastic-agent is running
  labels:
    k8s-app: elastic-agent
rules:
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs: ["get", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: elastic-agent-kubeadm-config
  labels:
    k8s-app: elastic-agent
rules:
  - apiGroups: [""]
    resources:
      - configmaps
    resourceNames:
      - kubeadm-config
    verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-agent
  labels:
    k8s-app: elastic-agent
