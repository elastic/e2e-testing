#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'master' }
  environment {
    REPO = 'e2e-testing'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    PIPELINE_LOG_LEVEL='DEBUG'
    MTIME_FILTER = "${params.MTIME_FILTER}"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    cron('H 4,16 * * *')
  }
  parameters {
    string(name: 'MTIME_FILTER', defaultValue: '0.5', description: 'filter for the find mtime')
  }
  stages {
    stage('Checkout') {
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: BASE_DIR, githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Metrics') {
      options { skipDefaultCheckout() }
      steps {
        dir("${BASE_DIR}") {
          sh '.ci/scripts/metrics.sh "${MTIME_FILTER}"'
          archiveArtifacts(allowEmptyArchive: true, artifacts: "metrics/*")
          script {
            def bulkFile = 'metrics/report-bulk.json'
            if (fileExists(bulkFile)) {
              datafile = readFile(file: bulkFile)
              def secret = 'secret/observability-team/ci/jenkins-stats-cloud'
              def es = getVaultSecret(secret: secret)?.data.url
              def response = sendDataToElasticsearch(es: es, secret: secret, data: datafile, restCall: '/reuse/_bulk/')
              log(level: 'DEBUG', text: "sendDataToElasticsearch: ${response}")
            }
          }
        }
      }
      post {
        always {
          archiveArtifacts allowEmptyArchive: true, artifacts: "${BASE_DIR}/cli/dist/**"
        }
      }
    }
  }
  post {
    cleanup {
      deleteDir()
      notifyBuildResult(prComment: true)
    }
  }
}
