#!/usr/bin/env groovy

@Library('apm@test/fleet-cloud') _

pipeline {
  agent { label 'darwin && orka && x86_64' }
  environment {
    REPO = 'e2e-testing'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    ELASTIC_APM_ACTIVE="true"
    ELASTIC_APM_ENVIRONMENT="ci"
    ELASTIC_APM_LOG_FILE="stderr"
    ELASTIC_APM_LOG_LEVEL="debug"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    JOB_GIT_CREDENTIALS = "2a9602aa-ab9f-4e52-baf3-b71ca88469c7-UserAndToken"
    DOCKER_REGISTRY = 'docker.elastic.co'
    PROVIDER = 'remote'
    BEAT_VERSION = "${params.BEAT_VERSION.trim()}"
    ELASTIC_AGENT_VERSION = "${params.ELASTIC_AGENT_VERSION.trim()}"
    STACK_VERSION = "${params.STACK_VERSION.trim()}"
    //CLUSTER_NAME = "e2e-testing-${BUILD_ID}-${BRANCH_NAME}-${STACK_VERSION.replaceAll('.', '-')}"
    CLUSTER_NAME = "e2e-testing-${BRANCH_NAME}-${STACK_VERSION}"
    HOME = "${env.WORKSPACE}"
    PATH = "${env.PATH}:${env.WORKSPACE}/bin:${env.WORKSPACE}/${env.BASE_DIR}/.ci/scripts"
    GO111MODULE = 'on'
  }
  options {
    timeout(time: 90, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '200', artifactNumToKeepStr: '30', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  parameters {
    string(name: 'runTestsSuites', defaultValue: '', description: 'A comma-separated list of test suites to run (default: empty to run all test suites)')
    string(name: 'testMatrixFile', defaultValue: '.ci/.e2e-tests.yaml', description: 'The file with the test suite and scenarios to be tested.')
    string(name: 'ELASTIC_AGENT_VERSION', defaultValue: '8.4.0-SNAPSHOT', description: 'SemVer version of the Elastic Agent to be used for the tests. You can use here the tag of your PR to test your changes')
    string(name: 'STACK_VERSION', defaultValue: '8.4.0-SNAPSHOT', description: 'SemVer version of the stack to be used for the tests.')
    string(name: 'BEAT_VERSION', defaultValue: '8.4.0-SNAPSHOT', description: 'SemVer version of the Beat to be used for the tests. You can use here the tag of your PR to test your changes')
    choice(name: 'LOG_LEVEL', choices: ['TRACE', 'DEBUG', 'INFO'], description: 'Log level to be used')
    choice(name: 'TIMEOUT_FACTOR', choices: ['5', '3', '7', '11'], description: 'Max number of minutes for timeout backoff strategies')
  }
  stages {
    stage('Checkout') {
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: BASE_DIR, githubNotifyFirstTimeContributor: true)
        stash(allowEmpty: true, name: 'source', useDefaultExcludes: false)
        setEnvVar("GO_VERSION", readFile("${env.WORKSPACE}/${env.BASE_DIR}/.go-version").trim())
      }
    }
    stage('Create cluster') {
      options { skipDefaultCheckout() }
      steps {
        echo "CLUSTER_NAME=${env.CLUSTER_NAME}"
        createCluster()
      }
    }
    stage('Functional Test') {
      options { skipDefaultCheckout() }
      steps {
        withGithubNotify(context: 'Functional Test', tab: 'tests') {
          deleteDir()
          unstash 'source'
          withGoEnv(version: "${GO_VERSION}"){
            withClusterEnv(cluster: env.CLUSTER_NAME, fleet: true, kibana: true, elasticsearch: true) {
              sh(label: 'debug purposes', script: '''
                 echo 'to be moved to the vm itseld'
                 sudo dseditgroup -o edit -a admin -t user wheel
                 dscacheutil -q group -a name wheel || true
                 ls -ltra /opt
                 sudo chmod 775 /opt
                 ls -ltra /
                 ls -ltra /opt
                 mkdir /opt/Elastic
                 ls -ltra /opt
                ''')
              sh(label: 'run fleet', script: '''
               TAGS="fleet_mode" \
               LOG_LEVEL="TRACE" \
               FORMAT="pretty,cucumber:fleet_mode.json,junit:fleet_mode.xml" \
               STACK_VERSION="${STACK_VERSION}" \
               BEAT_VERSION="${BEAT_VERSION}" \
               ELASTIC_AGENT_VERSION="${ELASTIC_AGENT_VERSION}" \
               make --no-print-directory -C "${BASE_DIR}/e2e/_suites/fleet" functional-test
              ''')
            }
          }
        }
      }
    }
  }
  post {
    /*always {
      destroyCluster()
    }*/
    cleanup {
      notifyBuildResult()
    }
  }
}

def createCluster() {
  withVaultEnv(){
    dir("${BASE_DIR}") {
      sshagent(credentials: ["f6c7695a-671e-4f4f-a331-acdce44ff9ba"]) {
        sh ".ci/scripts/deployment.sh 'create'"
      }
    }
  }
}

def destroyCluster() {
  withVaultEnv(){
    dir("${BASE_DIR}") {
      sshagent(credentials: ["f6c7695a-671e-4f4f-a331-acdce44ff9ba"]) {
        sh ".ci/scripts/deployment.sh 'destroy'"
      }
    }
  }
}

def withVaultEnv(Closure body){
  getVaultSecret.readSecretWrapper {
    withEnvMask(vars: [
      [var: 'VAULT_ADDR', password: env.VAULT_ADDR],
      [var: 'VAULT_ROLE_ID', password: env.VAULT_ROLE_ID],
      [var: 'VAULT_SECRET_ID', password: env.VAULT_SECRET_ID],
      [var: 'VAULT_AUTH_METHOD', password: 'approle'],
      [var: 'VAULT_AUTHTYPE', password: 'approle']
    ]){
      body()
    }
  }
}
