#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent any
  environment {
    REPO = 'metricbeat-tests-poc'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    BEATS_BASE_DIR = 'src/github.com/elastic/beats'
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    JOB_GIT_CREDENTIALS = '2a9602aa-ab9f-4e52-baf3-b71ca88469c7-UserAndToken'
    GO111MODULE = 'on'
    GOPROXY = 'https://proxy.golang.org'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  parameters {
    string(name: 'GO_VERSION', defaultValue: '1.12.7', description: "Go version to use.")
    string(name: 'MODULE', defaultValue: 'all', description: 'The metricbeats module to be tested.')
    string(name: 'PR', defaultValue: '', description: "PR to be tested out")
    string(name: 'GITHUB_CHECK_NAME', defaultValue: '', description: 'Name of the GitHub check to be updated. Only if this build is triggered from another parent stream.')
    string(name: 'GITHUB_CHECK_REPO', defaultValue: '', description: 'Name of the GitHub repo to be updated. Only if this build is triggered from another parent stream.')
    string(name: 'GITHUB_CHECK_SHA1', defaultValue: '', description: 'Name of the GitHub repo to be updated. Only if this build is triggered from another parent stream.')
  }
  stages {
    stage('Initializing'){
      agent { label 'linux && immutable' }
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        GOPATH = "${env.WORKSPACE}"
        GO_VERSION = "${params.GO_VERSION.trim()}"
        PATH = "${env.PATH}:${env.WORKSPACE}/bin"
      }
      stages {
        stage('Checkout') {
          steps {
            gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
            stash allowEmpty: true, name: 'source', useDefaultExcludes: false
          }
        }
        stage('Tests') {
          agent { label 'linux && immutable' }
          options { skipDefaultCheckout() }
          steps {
            withGithubNotify(context: 'Tests', tab: 'tests') {
              deleteDir()
              unstash 'source'
              dir(env.BASE_DIR){
                sh script: '.ci/scripts/build-test.sh', label: 'Build and test'
              }
              stash allowEmpty: true, name: 'build', useDefaultExcludes: false, excludes: '.gimme/**'
            }
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/outputs/junit-*.xml")
            }
          }
        }
        stage('Tests PR') {
          agent { label 'linux && immutable && docker' }
          options { skipDefaultCheckout() }
          when {
            beforeAgent true
            anyOf {
              triggeredBy 'UpstreamCause'
              expression { return params.PR.trim() }
            }
          }
          stages {
            stage('Beats') {
              steps {
                githubCheckNotify('PENDING')
                deleteDir()
                gitCheckout(basedir: env.BEATS_BASE_DIR, repo: 'git@github.com:elastic/beats.git',
                            branch: params.PR, credentialsId: env.JOB_GIT_CREDENTIALS)
                dir("${BEATS_BASE_DIR}/metricbeats"){
                  sh '''
                    eval "$(curl -sL https://raw.githubusercontent.com/travis-ci/gimme/master/gimme | GIMME_GO_VERSION=${GO_VERSION} bash)"
                    go get -u -d github.com/magefile/mage
                    cd $GOPATH/src/github.com/magefile/mage
                    go run bootstrap.go
                    PLATFORMS=linux/amd64 mage package
                    docker images
                  '''
                }
              }
            }
            stage('Functional testing') {
              steps {
                deleteDir()
                unstash 'build'
                dir(env.BASE_DIR){
                  sh script: '.ci/scripts/functional-test.sh', label: 'Run functional tests'
                }
              }
              post {
                always {
                  junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/outputs/junit-*.xml")
                  archiveArtifacts allowEmptyArchive: true, artifacts: "${BASE_DIR}/outputs/junit-*"
                }
              }
            }
          }
          post {
            always {
              githubCheckNotify(currentBuild.currentResult == 'SUCCESS' ? 'SUCCESS' : 'FAILURE')
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}


/**
 Notify the GitHub check of the parent stream
**/
def githubCheckNotify(String status) {
  if (params.GITHUB_CHECK_NAME?.trim() && params.GITHUB_CHECK_REPO?.trim() && params.GITHUB_CHECK_SHA1?.trim()) {
    githubNotify context: "${params.GITHUB_CHECK_NAME}",
                 description: "${params.GITHUB_CHECK_NAME} ${status.toLowerCase()}",
                 status: "${status}",
                 targetUrl: "${env.RUN_DISPLAY_URL}",
                 sha: params.GITHUB_CHECK_SHA1, account: 'elastic', repo: params.GITHUB_CHECK_REPO, credentialsId: env.JOB_GIT_CREDENTIALS
  }
}
