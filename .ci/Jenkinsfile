#!/usr/bin/env groovy

@Library('apm@current') _

import groovy.transform.Field

/**
Store the worker status so if the CI worker behaves wrongy then let's rerun the stage again
*/
@Field def workersStatus = [:]

def e2eUtils

pipeline {
  agent { label 'ubuntu-20.04 && immutable && docker' }
  environment {
    REPO = 'e2e-testing'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    REAL_BASE_DIR = "${env.WORKSPACE}/${env.BASE_DIR}"
    ELASTIC_APM_ACTIVE="true"
    ELASTIC_APM_ENVIRONMENT="ci"
    ELASTIC_APM_LOG_FILE="stderr"
    ELASTIC_APM_LOG_LEVEL="debug"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    JOB_GIT_CREDENTIALS = "2a9602aa-ab9f-4e52-baf3-b71ca88469c7-UserAndToken"
    DOCKER_ELASTIC_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    DOCKER_REGISTRY = 'docker.elastic.co'
    ELASTIC_CLOUD_SECRET = 'secret/observability-team/ci/elastic-cloud/observability-team-user'
    GCP_PROVISIONER_SECRET = 'secret/observability-team/ci/service-account/jenkins-gce-provisioner'
    AWS_PROVISIONER_SECRET = 'secret/observability-team/ci/elastic-observability-aws-account-auth'
    E2E_SSH_KEY = "${env.REAL_BASE_DIR}/e2essh"
    E2E_SSH_KEY_PUB = "${env.E2E_SSH_KEY}.pub"
    TEST_MATRIX_FILE = "${params.testMatrixFile}"
    RUN_AS_MAIN_BRANCH = "${params.Run_As_Main_Branch}"
    DESTROY_CLOUD_RESOURCES = "${params.DESTROY_CLOUD_RESOURCES}"
    RUN_TEST_SUITES = "${params.runTestsSuites}"
  }
  options {
    timeout(time: 120, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '200', artifactNumToKeepStr: '30', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  parameters {
    booleanParam(name: 'Run_As_Main_Branch', defaultValue: false, description: 'Allow to run any steps on a PR, some steps normally only run on main branch.')
    booleanParam(name: "DESTROY_CLOUD_RESOURCES", defaultValue: true, description: "If checked, cloud resources will be destroyed at the end of the pipeline. Default true")
    booleanParam(name: "SKIP_SCENARIOS", defaultValue: true, description: "If it's needed to skip those scenarios marked as @skip. Default true")
    booleanParam(name: "NIGHTLY_SCENARIOS", defaultValue: false, description: "Deprecated. Not used in this pipeline any more. Please refer to the 'testMatrixFile' param, which defines what scenarios to run")
    string(name: 'runTestsSuites', defaultValue: '', description: 'A comma-separated list of test suites to run (default: empty to run all test suites)')
    string(name: 'testMatrixFile', defaultValue: '.ci/.e2e-tests-tmp.yaml', description: 'The file with the test suite and scenarios to be tested.')
    booleanParam(name: "forceSkipGitChecks", defaultValue: false, description: "If it's needed to check for Git changes to filter by modified sources")
    booleanParam(name: "notifyOnGreenBuilds", defaultValue: false, description: "If it's needed to notify to Slack with green builds.")
    string(name: 'SLACK_CHANNEL', defaultValue: 'observablt-bots', description: 'The Slack channel(s) where errors will be posted. For multiple channels, use a comma-separated list of channels')
    string(name: 'ELASTIC_AGENT_DOWNLOAD_URL', defaultValue: '', description: 'If present, it will override the download URL for the Elastic agent artifact. (I.e. https://snapshots.elastic.co/8.0.0-59098054/downloads/beats/elastic-agent/elastic-agent-8.0.0-SNAPSHOT-linux-x86_64.tar.gz')
    string(name: 'ELASTIC_AGENT_VERSION', defaultValue: '8.6.0-c9d1a5e9-SNAPSHOT', description: 'SemVer version of the Elastic Agent to be used for the tests. You can use here the tag of your PR to test your changes')
    string(name: 'BEAT_VERSION', defaultValue: '8.6.0-c9d1a5e9-SNAPSHOT', description: 'SemVer version of the Beat to be used for the tests. You can use here the tag of your PR to test your changes')
    choice(name: 'LOG_LEVEL', choices: ['TRACE', 'DEBUG', 'INFO'], description: 'Log level to be used')
    choice(name: 'TIMEOUT_FACTOR', choices: ['5', '3', '7', '11'], description: 'Max number of minutes for timeout backoff strategies')
    string(name: 'KIBANA_VERSION', defaultValue: '', description: 'Docker tag of the kibana to be used for the tests. It will refer to an image related to a Kibana PR, under the Observability-CI namespace')
    string(name: 'STACK_VERSION', defaultValue: '8.6.0-c9d1a5e9-SNAPSHOT', description: 'SemVer version of the stack to be used for the tests.')
    string(name: 'HELM_CHART_VERSION', defaultValue: '7.17.3', description: 'SemVer version of Helm chart to be used.')
    string(name: 'HELM_VERSION', defaultValue: '3.9.0', description: 'SemVer version of Helm to be used.')
    string(name: 'KIND_VERSION', defaultValue: '0.14.0', description: 'SemVer version of Kind to be used.')
    string(name: 'KUBERNETES_VERSION', defaultValue: '1.25.0', description: 'SemVer version of Kubernetes to be used.')
    string(name: 'GITHUB_CHECK_NAME', defaultValue: '', description: 'Name of the GitHub check to be updated. Only if this build is triggered from another parent stream.')
    string(name: 'GITHUB_CHECK_REPO', defaultValue: 'elastic-agent', description: 'Name of the GitHub repo to be updated. Only modified if this build is triggered from another parent stream (i.e. Beats).')
    string(name: 'GITHUB_CHECK_SHA1', defaultValue: '', description: 'Git SHA for the upstream project (branch or PR)')
  }
  stages {
    stage('Initializing') {
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.PATH}:${env.WORKSPACE}/bin:${env.REAL_BASE_DIR}/.ci/scripts"
        GO111MODULE = 'on'
        SKIP_SCENARIOS = "${params.SKIP_SCENARIOS}"
        SLACK_CHANNEL = "${params.SLACK_CHANNEL.trim()}"
        ELASTIC_AGENT_DOWNLOAD_URL = "${params.ELASTIC_AGENT_DOWNLOAD_URL.trim()}"
        BEAT_VERSION = "${params.BEAT_VERSION.trim()}"
        ELASTIC_AGENT_VERSION = "${params.ELASTIC_AGENT_VERSION.trim()}"
        KIBANA_VERSION = "${params.KIBANA_VERSION.trim()}"
        STACK_VERSION = "${params.STACK_VERSION.trim()}"
        FORCE_SKIP_GIT_CHECKS = "${params.forceSkipGitChecks}"
        HELM_CHART_VERSION = "${params.HELM_CHART_VERSION.trim()}"
        HELM_VERSION = "${params.HELM_VERSION.trim()}"
        KIND_VERSION = "${params.KIND_VERSION.trim()}"
        KUBERNETES_VERSION = "${params.KUBERNETES_VERSION.trim()}"
        LOG_LEVEL = "${params.LOG_LEVEL.trim()}"
        TIMEOUT_FACTOR = "${params.TIMEOUT_FACTOR.trim()}"
        GITHUB_CHECK_REPO = "${params.GITHUB_CHECK_REPO.trim()}"
        GITHUB_CHECK_NAME = "${params.GITHUB_CHECK_NAME.trim()}"
        GITHUB_CHECK_SHA1 = "${params.GITHUB_CHECK_SHA1.trim()}"
      }
      stages {
        stage('Checkout') {
          steps {
            pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
            deleteDir()
            gitCheckout(basedir: BASE_DIR, githubNotifyFirstTimeContributor: true) 
            stash allowEmpty: true, name: 'source', useDefaultExcludes: false
            setEnvVar("GO_VERSION", readFile("${env.REAL_BASE_DIR}/.go-version").trim())
            setEnvVar("LABELS_STRING", "buildURL=${env.BUILD_URL} gitSha=${env.GIT_BASE_COMMIT} build=${env.BUILD_ID} repo=${env.REPO} branch=${env.BRANCH_NAME.toLowerCase().replaceAll('[^a-z0-9-]', '-')} type=ci")
            script {
              e2eUtils = load "${env.REAL_BASE_DIR}/.ci/e2eUtils.groovy"
              e2eUtils.init(workersStatus)
              e2eUtils.checkSkipTests()
              echo '<<OK>>'
              e2eUtils.githubCheckNotify(
                status: 'PENDING',
                githubCheckRepo: env.GITHUB_CHECK_REPO,
                githubCheckSha1: env.GITHUB_CHECK_SHA1,
                githubCheckName: env.GITHUB_GITHUB_CHECK_NAME
              )
            }
          }
        }
        stage('Build Docs') {
          options { skipDefaultCheckout() }
          when {
            beforeAgent true
            anyOf {
              expression { return env.FORCE_SKIP_GIT_CHECKS == "true" }
              expression { return env.SKIP_TESTS == "false" }
            }
          }
          steps {
            dockerLogin(secret: "${DOCKER_ELASTIC_SECRET}", registry: "${DOCKER_REGISTRY}")
            dir("${BASE_DIR}/e2e") {
              sh(label: 'Build docs', script: 'make build-docs')
            }
          }
          post {
            always {
              dir("${BASE_DIR}") {
                archiveArtifacts allowEmptyArchive: true, artifacts: "e2e/docs/**"
              }
            }
          }
        }
        stage('Deploy Test Infra') {
          failFast true
          options { skipDefaultCheckout() }
          environment {
            GO111MODULE = 'on'
            PATH = "${env.HOME}/bin:${env.REAL_BASE_DIR}/bin:${HOME}/go/bin:${env.PATH}"
            SUITE = 'fleet'
            STACK_INSTANCE_ID = "${env.BUILD_URL}_stack"
            TAGS = "non-existing-tag"
          }
          when {
            beforeAgent true
            anyOf {
              expression { return env.FORCE_SKIP_GIT_CHECKS == "true" }
              expression { return env.SKIP_TESTS == "false" }
            }
          }
          steps {
            withGithubNotify(context: 'Deploy Stack', tab: 'tests') {
              deleteDir()
              unstash 'source'
              script {                
                sh "ssh-keygen -b 4096 -t rsa -f ${E2E_SSH_KEY} -q -N \"\" "

                dir("${env.REAL_BASE_DIR}") {
                  e2eUtils.ciBuild() {
                    // sh(label: 'Create Stack node', script: "make -C .ci provision-stack")
                  }
                  e2eUtils.ciBuild() {
                    retryWithSleep(retries: 3, seconds: 5, backoff: true){
                      // sh(label: 'Setup Stack node', script: "make -C .ci setup-stack")
                    }
                  }
                  e2eUtils.ciBuild() {
                    retryWithSleep(retries: 3, seconds: 5, backoff: true){
                      // sh(label: 'Start Elastic Stack', script: "make -C .ci start-elastic-stack")
                    }
                  }

                  // Update stash with latest changes from the stack deployment
                  stash allowEmpty: true, name: 'sourceEnvModified', useDefaultExcludes: false, excludes: '.ansible, .runID'
                }
              }
            }
          }
        }

        stage('End-To-End Tests') {
          failFast true
          options { skipDefaultCheckout() }
          environment {
            GO111MODULE = 'on'
            PATH = "${env.HOME}/bin:${env.REAL_BASE_DIR}/bin:${HOME}/go/bin:${env.PATH}"
          }
          when {
            beforeAgent true
            anyOf {
              expression { return env.FORCE_SKIP_GIT_CHECKS == "true" }
              expression { return env.SKIP_TESTS == "false" }
            }
          }
          steps {
            withGithubNotify(context: 'E2E Tests', tab: 'tests') {
              script {                
                def testMatrix = readYaml(file: "${env.REAL_BASE_DIR}/${TEST_MATRIX_FILE}")
                e2eUtils.runE2ETests(
                  testMatrix: testMatrix,
                  selectedSuites: env.RUN_TEST_SUITES,
                  runAsMainBranch: env.RUN_AS_MAIN_BRANCH,
                  githubCheckSha1: env.GITHUB_CHECK_SHA1,
                  githubCheckRepo: env.GITHUB_CHECK_REP,
                  destroyTestRunner: env.DESTROY_CLOUD_RESOURCES
                )
              }
            }
          }
          post {
            cleanup {
              // Once all tests are complete we need to teardown the single instance with the deployed stack
              script {
                e2eUtils.destroyStack(destroyCloudResources: env.DESTROY_CLOUD_RESOURCES)
              }
            }
          }
        }
        stage('Release') {
          options { skipDefaultCheckout() }
          when { tag "v*" }
          steps {
            deleteDir()
            unstash 'source'
            dir("${BASE_DIR}") {
              setEnvVar("GITHUB_TOKEN", getGithubToken())
              retryWithSleep(retries: 2, seconds: 5, backoff: true) {
                sh(label: 'Release binaries with gorelease', script: 'curl -sL https://git.io/goreleaser | bash -s -- --rm-dist', returnStatus: true)
              }
            }
          }
          post {
            always {
              archiveArtifacts allowEmptyArchive: true, artifacts: "${BASE_DIR}/cli/dist/**"
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      script {
        e2eUtils.doNotifyBuildResult(
          slackNotify: params.notifyOnGreenBuilds,
          slackChannel: env.SLACK_CHANNEL,
          runTestsSuites: env.RUN_TEST_SUITES,
          githubCheckRepo: env.GITHUB_CHECK_REPO,
          githubCheckSha1: env.GITHUB_CHECK_SHA1,
          githubCheckName: env.GITHUB_GITHUB_CHECK_NAME
        )
      }
    }
  }
}

